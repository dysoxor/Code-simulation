import turtle
import random
import math
import time

#--------------- crée la fenêtre ----------------------------

wn = turtle.getscreen()
wn.setup(1200, 600)
wn.title("simulation du robot magasinier")
turtle.speed(0)
turtle.hideturtle()

#--------------- Texte indicateur ---------------------------
ind_1 = turtle.Turtle()
ind_1.hideturtle()
ind_1.speed(0)
ind_1.color("white")
ind_1.goto(515, 280)
ind_1.color("green")
ind_1.write("vert: petit")

ind_2 = turtle.Turtle()
ind_2.hideturtle()
ind_2.speed(0)
ind_2.color("white")
ind_2.goto(515, 255)
ind_2.color("red")
ind_2.write("rouge: moyen")

ind_3 = turtle.Turtle()
ind_3.hideturtle()
ind_3.speed(0)
ind_3.color("white")
ind_3.goto(515, 230)
ind_3.color("blue")
ind_3.write("bleu: grand")

ind_4 = turtle.Turtle()
ind_4.hideturtle()
ind_4.speed(0)
ind_4.color("white")
ind_4.goto(-510, 260)
ind_4.color("black")
ind_4.write("depot 1(petits)", True, align="center", font=("Arial", 12, "normal"))

ind_5 = turtle.Turtle()
ind_5.hideturtle()
ind_5.speed(0)
ind_5.color("white")
ind_5.goto(-510, -260)
ind_5.color("black")
ind_5.write("depot 2(grands)", True, align="center", font=("Arial", 12, "normal"))

#-----------------------------------------------------------------

def zone_depot():
    """dessine les zones de depot"""
    pen = turtle.Turtle()
    pen.hideturtle()
    pen.speed(0)
    pen.color("white")
    pen.goto(-400, -300)
    pen.pensize(5)
    pen.color("black")
    pen.left(90)
    pen.fd(300)
    pen.left(90)
    pen.fd(200)
    pen.left(180)
    pen.fd(200)
    pen.left(90)
    pen.fd(300)


def chemin():
    """dessine le chemin au centre"""
    pen = turtle.Turtle()
    pen.hideturtle()
    pen.speed(0)
    pen.color("white")
    pen.goto(-340,200)
    pen.pensize(5)
    pen.color("black")
    pen.left(-90)
    pen.fd(400)
    pen.left(90)
    pen.fd(170)
    pen.left(90)
    pen.fd(400)
    pen.left(-90)
    pen.fd(170)
    pen.left(-90)
    pen.fd(400)
    pen.left(90)
    pen.fd(170)
    pen.left(90)
    pen.fd(400)
    pen.left(-90)
    pen.fd(170)
    pen.left(-90)
    pen.fd(400)
    pen.left(90)
    pen.fd(170)
    pen.left(90)
    pen.fd(400)


"""def pvc(i, x, y):
    "dessine les tube de pvc dans leur place adequate"
    if i == 0:
        petit_1 = turtle.Turtle()
        petit_1.shape("circle")
        petit_1.color("green")
        petit_1.penup()
        petit_1.speed(0)
        petit_1.goto(x,y)
    elif i == 1:
        petit_2 = turtle.Turtle()
        petit_2.shape("circle")
        petit_2.color("green")
        petit_2.penup()
        petit_2.speed(0)
        petit_2.goto(x,y)
    elif i == 2:
        moyen_1 = turtle.Turtle()
        moyen_1.shape("circle")
        moyen_1.color("red")
        moyen_1.penup()
        moyen_1.speed(0)
        moyen_1.goto(x,y)
    elif i == 3:
        moyen_2 = turtle.Turtle()
        moyen_2.shape("circle")
        moyen_2.color("red")
        moyen_2.penup()
        moyen_2.speed(0)
        moyen_2.goto(x,y)
    elif i == 4:
        grand_1 = turtle.Turtle()
        grand_1.shape("circle")
        grand_1.color("blue")
        grand_1.penup()
        grand_1.speed(0)
        grand_1.goto(x,y)
    elif i == 5:
        grand_2 = turtle.Turtle()
        grand_2.shape("circle")
        grand_2.color("blue")
        grand_2.penup()
        grand_2.speed(0)
        grand_2.goto(x,y)
    


def places_pvc(fioles):
    "determine la place à prendre pour chacune des fioles"
    for i in range(6):
        x, y = 0, 0
        if fioles[i]%2 == 1:
            y = 100
        else:
            y = -100
        if fioles[i] == 1 or fioles[i] == 2:
            x = - 340
        elif fioles[i] == 3 or fioles[i] == 4:
            x = - 170
        elif fioles[i] == 5 or fioles[i] == 6:
            x = 0
        elif fioles[i] == 7 or fioles[i] == 8:
            x = 170
        elif fioles[i] == 9 or fioles[i] == 10:
            x = 340
        elif fioles[i] == 11 or fioles[i] == 12:
            x = 510
        pvc(i, x, y)"""
    
    
    

def arena():
    """crée l'arène"""
    zone_depot()
    chemin()
    #places_pvc(fioles)

class Pvc():
    def __init__(self):
        places = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] 
        fioles = random.Random().sample(places, 6)
        self.loc = []
        for i in range(6):
            x, y = 0, 0
            if fioles[i]%2 == 1:
                y = 100
            else:
                y = -100
            if fioles[i] == 1 or fioles[i] == 2:
                x = - 340
            elif fioles[i] == 3 or fioles[i] == 4:
                x = - 170
            elif fioles[i] == 5 or fioles[i] == 6:
                x = 0
            elif fioles[i] == 7 or fioles[i] == 8:
                x = 170
            elif fioles[i] == 9 or fioles[i] == 10:
                x = 340
            elif fioles[i] == 11 or fioles[i] == 12:
                x = 510
            #self.loc[i:i] = tuple(x, y)
            #print(self.loc)
            if i == 0:
                petit_1 = turtle.Turtle()
                petit_1.shape("circle")
                petit_1.color("green")
                petit_1.penup()
                petit_1.speed(0)
                petit_1.goto(x,y)
            elif i == 1:
                petit_2 = turtle.Turtle()
                petit_2.shape("circle")
                petit_2.color("green")
                petit_2.penup()
                petit_2.speed(0)
                petit_2.goto(x,y)
            elif i == 2:
                moyen_1 = turtle.Turtle()
                moyen_1.shape("circle")
                moyen_1.color("red")
                moyen_1.penup()
                moyen_1.speed(0)
                moyen_1.goto(x,y)
            elif i == 3:
                moyen_2 = turtle.Turtle()
                moyen_2.shape("circle")
                moyen_2.color("red")
                moyen_2.penup()
                moyen_2.speed(0)
                moyen_2.goto(x,y)
            elif i == 4:
                grand_1 = turtle.Turtle()
                grand_1.shape("circle")
                grand_1.color("blue")
                grand_1.penup()
                grand_1.speed(0)
                grand_1.goto(x,y)
            elif i == 5:
                grand_2 = turtle.Turtle()
                grand_2.shape("circle")
                grand_2.color("blue")
                grand_2.penup()
                grand_2.speed(0)
                grand_2.goto(x,y)

        

class Car():
    def __init__(self):
        
        """chenille_1 = turtle.Turtle()
        chenille_1.shape("square")
        chenille_1.color("pink")
        chenille_1.penup()
        chenille_1.speed(0)
        chenille_1.resizemode("user")
        chenille_1.shapesize(3.4, 1.2, outline = 8)
        chenille_1.goto(-367,243)

        chenille_2 = turtle.Turtle()
        chenille_2.shape("square")
        chenille_2.color("pink")
        chenille_2.penup()
        chenille_2.speed(0)
        chenille_2.resizemode("user")
        chenille_2.shapesize(3.4, 1.2, outline = 8)
        chenille_2.goto(-313,243)"""
        self.xs = 0
        self.ys = 0
        self.vs = 0
        self.hs = 0
        self.angleTot = 0
        self.lastTime = time.time()
        self.newTime = 0
        

        self.base = turtle.Turtle()
        self.base.shape("square")
        self.base.color("pink")
        self.base.penup()
        self.base.speed(0)
        self.base.resizemode("user")
        self.base.shapesize(7.5, 7.55)
        self.base.goto(-340, 243)

        self.capt = turtle.Turtle()
        self.capt.penup()
        self.u = self.base.xcor() - 24
        self.t = self.base.ycor()-75
        self.capt.goto(self.u, self.t)

        self.captg = turtle.Turtle()
        self.captg.penup()
        self.v = self.base.xcor() + 24
        self.w = self.base.ycor() - 75
        self.captg.goto(self.v, self.w)
        

        self.alpha = -17.74467163
        self.alphag = 17.74467163
        self.r = 78.74642849




        """while True:
            base.sety(base.ycor()-1)
            # chenille_1.sety(chenille_1.ycor()-1)
            # chenille_2.sety(chenille_2.ycor()-1)"""
        
        
    def sendcar(self, x, y, v, h):
        self.angleTot += h
        self.alpha += h
        self.alphag += h
        if self.angleTot >= 360:
            self.angleTot = self.angleTot - 360
        self._set(x, y, v, h)
        self.avancer()

    def _getcar(self):
        return(self.xs, self.ys, self.vs, self.hs)

    def _set(self, x, y, v, h):
        #v = (self.base.ycor() - math.cos(math.radians(self.angleTot)))
        self.xs = x
        self.ys = y
        self.vs = v
        self.hs = h
        self.constr = 1

    def avancer(self):
        u = self.base.xcor()+self.r*math.sin(math.radians(self.alpha))
        t = self.base.ycor()-self.r*math.cos(math.radians(self.alpha))
        v = self.base.xcor()+self.r*math.sin(math.radians(self.alphag))
        w = self.base.ycor()-self.r*math.cos(math.radians(self.alphag))
        
        self.capt.goto(u, t)
        self.captg.goto(v, w)
        if self.xs == 4:
            self.xs = 0
        elif (-202<=t<=202 and -342<=u<=-338) or (-202<=t<=-198 and -342<=u<=-168)\
           or (-202<=t<=202 and -172<=u<=-168) or (198<=t<=202 and -172<=u<=2)\
           or (-202<=t<=202 and -2<=u<=2) or (-202<=t<=-198 and -2<=u<=172)\
           or (-202<=t<=202 and 168<=u<=172) or (198<=t<=202 and 168<=u<=342)\
           or (-202<=t<=202 and 338<=u<=342) or (-202<=t<=-198 and 338<=u<=512)\
           or (-202<=t<=202 and 508<=u<=512):
            self.xs = 1
            if (-202<=w<=202 and -342<=v<=-338) or (-202<=w<=-198 and -342<=v<=-168)\
               or (-202<=w<=202 and -172<=v<=-168) or (198<=w<=202 and -172<=v<=2)\
               or (-202<=w<=202 and -2<=v<=2) or (-202<=w<=-198 and -2<=v<=172)\
               or (-202<=w<=202 and 168<=v<=172) or (198<=w<=202 and 168<=v<=342)\
               or (-202<=w<=202 and 338<=v<=342) or (-202<=w<=-198 and 338<=v<=512)\
               or (-202<=w<=202 and 508<=v<=512):
                self.xs = 3
        elif (-202<=w<=202 and -342<=v<=-338) or (-202<=w<=-198 and -342<=v<=-168)\
           or (-202<=w<=202 and -172<=v<=-168) or (198<=w<=202 and -172<=v<=2)\
           or (-202<=w<=202 and -2<=v<=2) or (-202<=w<=-198 and -2<=v<=172)\
           or (-202<=w<=202 and 168<=v<=172) or (198<=w<=202 and 168<=v<=342)\
           or (-202<=w<=202 and 338<=v<=342) or (-202<=w<=-198 and 338<=v<=512)\
           or (-202<=w<=202 and 508<=v<=512):
            self.xs = 2
            #print(v, " || ", w)
        else:
            self.xs = 0
        if self.hs != 0 and self.vs == 0:
            self.lastTime = time.time()
            self.base.tilt(self.hs)
            self.base.setposition(self.base.xcor()+16*math.sin(math.radians(self.hs)), self.base.ycor()+ 16 - 16*math.cos(math.radians(self.hs)))
            #print(16*math.sin(math.radians(self.hs)), " et ", 16 - 16*math.cos(math.radians(self.hs)))
            
        elif self.hs == 0 and self.vs != 0:
            self.lastTime = time.time()
            self.base.setposition(self.base.xcor() + (self.vs*math.sin(math.radians(self.angleTot))),self.base.ycor() - (self.vs*math.cos(math.radians(self.angleTot)))) 
            # self.base.sety(self.base.ycor() - (self.vs*math.cos(self.angleTot)))
            # self.base.setx(self.base.xcor() + (self.vs*math.sin(self.angleTot)))
        elif self.hs != 0 and self.vs != 0:
            self.newTime = time.time()
            dt = self.newTime - self.lastTime
            # print(dt)
            self.lastTime = self.newTime
            R = (15*self.vs*dt)/self.hs
            # print(R)
            self.base.tilt(self.hs)
            if self.hs > 0:
                self.base.setposition(self.base.xcor() + (R*math.sin(math.radians(self.angleTot))), self.base.ycor() - (R*math.cos(math.radians(self.angleTot))))
            elif self.hs < 0:
                self.base.setposition(self.base.xcor() - (R*math.sin(math.radians(self.angleTot))), self.base.ycor() + (R*math.cos(math.radians(self.angleTot))))
                # print("x: ", (R*math.sin(math.radians(self.angleTot))), "et y: ", -(R*math.cos(math.radians(self.angleTot))), "angle: ", self.angleTot)
        #iter(self.avancer())
                


    


        
        




arena() # crée l'arène sur la fenêtre
pvc = Pvc()
car = Car()

while True:
    while car.xs == 0:
        car.sendcar(car.xs, car.ys, 2, 0)
    while car.xs == 1:
        i = 0
        while i < 35:
            i+=1
            car.sendcar(car.xs, car.ys, 2, 0)
        while i<80:
            i+=1
            car.sendcar(car.xs, car.ys, 0, -2)
    while car.xs == 2:
        i = 0
        while i < 35:
            i += 1
            car.sendcar(4, car.ys, 2, 0)
        while i < 80:
            i+=1
            car.sendcar(4, car.ys, 0, 2)
    
    




wn.mainloop()
